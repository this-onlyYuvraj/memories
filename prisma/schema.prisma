generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  
  accounts      Account[]
  sessions      Session[]
  memories      Memory[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Photo {
  id         String   @id @default(cuid())
  memoryId   String   
  imageUrl   String
  location   String?
  latitude   Float?
  longitude  Float?
  takenAt    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  memory     Memory   @relation("MemoryPhotos", fields: [memoryId], references: [id], onDelete: Cascade)
}

model Memory {
  id          String   @id @default(cuid())
  title       String
  description String
  location    String
  latitude    Float?   
  longitude   Float?
  startDate   DateTime  
  endDate     DateTime  
  isPublic    Boolean
  photos      Photo[]  @relation("MemoryPhotos")
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
